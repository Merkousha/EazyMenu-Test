@model SmsDeliveryLogsViewModel
@{
    ViewData["Title"] = "گزارش پیامک‌ها";
    var statusParameter = Model.Status?.ToString() ?? string.Empty;
}

<div class="container" dir="rtl">
    <div id="sms-alert-container" class="mb-4"></div>

    <div class="d-flex align-items-center justify-content-between mb-4">
        <div>
            <h1 class="h3 mb-1">گزارش پیامک‌های تراکنشی</h1>
            <p class="text-muted mb-0">وضعیت ارسال پیامک‌های OTP، سفارش و رزرو را در یک نگاه بررسی کنید.</p>
        </div>
        <span class="badge bg-light text-dark">@Model.Items.Count پیامک در این صفحه</span>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger" role="alert">
            <div asp-validation-summary="All"></div>
        </div>
    }

    <form method="get" class="row g-3 align-items-end mb-4">
        <div class="col-md-4">
            <label class="form-label" for="status">وضعیت ارسال</label>
            <select class="form-select" id="status" name="status">
                @foreach (var option in Model.StatusOptions)
                {
                    <option value="@option.Value" selected="@(option.Selected ? "selected" : null)">@option.Text</option>
                }
            </select>
        </div>
        <div class="col-md-2">
            <label class="form-label" for="page">شماره صفحه</label>
            <input type="number" class="form-control" id="page" name="page" value="@Model.Page" min="1" />
        </div>
        <div class="col-md-3">
            <button type="submit" class="btn btn-primary">اعمال فیلتر</button>
            <a class="btn btn-outline-secondary ms-2" asp-action="SmsLogs">بازنشانی</a>
        </div>
    </form>

    @if (Model.Items.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            تاکنون لاگی برای نمایش وجود ندارد.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover align-middle">
                <thead class="table-light">
                    <tr>
                        <th scope="col">زمان ثبت</th>
                        <th scope="col">گیرنده</th>
                        <th scope="col">وضعیت</th>
                        <th scope="col">متن پیام</th>
                        <th scope="col">ارائه‌دهنده</th>
                        <th scope="col">جزئیات خطا</th>
                    </tr>
                </thead>
                <tbody>
                @foreach (var log in Model.Items)
                {
                    var isFallback = IsFallbackProvider(log.Provider);
                    var statusClass = log.Status switch
                    {
                        SmsDeliveryStatus.Sent => "bg-success",
                        SmsDeliveryStatus.Pending => "bg-warning text-dark",
                        SmsDeliveryStatus.Failed => "bg-danger",
                        _ => "bg-secondary"
                    };
                    var rowClass = isFallback ? "table-warning" : string.Empty;
                    <tr class="@rowClass">
                        <td class="text-nowrap">@log.OccurredAt.ToLocalTime().ToString("yyyy/MM/dd HH:mm")</td>
                        <td class="fw-semibold">@log.PhoneNumber</td>
                        <td>
                            <span class="badge @statusClass">
                                @GetStatusLabel(log.Status)
                            </span>
                        </td>
                        <td style="white-space: pre-line; max-width: 360px;">
                            @log.Message
                        </td>
                        <td>
                            <span class="badge bg-light text-dark">@GetProviderLabel(log.Provider)</span>
                        </td>
                        <td>
                            @if (!string.IsNullOrWhiteSpace(log.ErrorMessage))
                            {
                                <div class="small text-danger">@log.ErrorMessage</div>
                                if (!string.IsNullOrWhiteSpace(log.ErrorCode))
                                {
                                    <div class="small text-muted">کد خطا: @log.ErrorCode</div>
                                }
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <nav class="d-flex justify-content-between" aria-label="صفحات گزارش پیامک">
            <a class="btn btn-outline-primary @(Model.Page <= 1 ? "disabled" : string.Empty)"
               asp-action="SmsLogs"
               asp-route-page="@(Model.Page - 1)"
               asp-route-status="@statusParameter">
                صفحه قبل
            </a>
            <span class="align-self-center text-muted">صفحه @Model.Page</span>
            <a class="btn btn-outline-primary @(Model.HasMore ? string.Empty : "disabled")"
               asp-action="SmsLogs"
               asp-route-page="@(Model.Page + 1)"
               asp-route-status="@statusParameter">
                صفحه بعد
            </a>
        </nav>
    }
</div>

@functions {
    private static string GetStatusLabel(SmsDeliveryStatus status) => status switch
    {
        SmsDeliveryStatus.Pending => "در صف ارسال",
        SmsDeliveryStatus.Sent => "ارسال موفق",
        SmsDeliveryStatus.Failed => "ناموفق",
        _ => status.ToString()
    };

    private static string GetProviderLabel(string provider)
    {
        if (IsFallbackProvider(provider))
        {
            return "ایمیل جایگزین";
        }

        return provider switch
        {
            string p when string.Equals(p, "Kavenegar", System.StringComparison.OrdinalIgnoreCase) => "کاوه‌نگار",
            string p when string.Equals(p, "Logging", System.StringComparison.OrdinalIgnoreCase) => "ثبت لاگ",
            _ => provider
        };
    }

    private static bool IsFallbackProvider(string provider) => string.Equals(provider, "fallback-email", System.StringComparison.OrdinalIgnoreCase);
}

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/8.0.0/signalr.min.js" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        (function () {
            const container = document.getElementById('sms-alert-container');
            if (!container || !window.signalR) {
                return;
            }

            const addAlert = (payload) => {
                const alert = document.createElement('div');
                alert.className = 'alert alert-warning alert-dismissible fade show shadow-sm border-start border-4 border-warning-subtle';
                alert.setAttribute('role', 'alert');

                const title = document.createElement('h2');
                title.className = 'h6 fw-bold mb-2';
                title.textContent = 'اخطار: ارسال پیامک ناموفق';

                const message = document.createElement('p');
                message.className = 'mb-1';
                message.textContent = `پیامک به شماره ${payload.phoneNumber} با خطا مواجه شد و کانال ${payload.channel} فعال شد.`;

                const error = document.createElement('div');
                error.className = 'small text-muted';
                error.textContent = `پیام خطا: ${payload.errorMessage}`;

                const time = document.createElement('div');
                time.className = 'small text-muted';
                const occurred = new Date(payload.occurredAt);
                time.textContent = `زمان: ${occurred.toLocaleString('fa-IR')}`;

                const closeButton = document.createElement('button');
                closeButton.type = 'button';
                closeButton.className = 'btn-close';
                closeButton.setAttribute('data-bs-dismiss', 'alert');
                closeButton.setAttribute('aria-label', 'بستن');

                alert.appendChild(closeButton);
                alert.appendChild(title);
                alert.appendChild(message);
                alert.appendChild(error);
                alert.appendChild(time);

                container.prepend(alert);
            };

            const connection = new signalR.HubConnectionBuilder()
                .withUrl('/hubs/sms-alerts')
                .withAutomaticReconnect()
                .build();

            connection.on('smsFailure', addAlert);

            connection.start()
                .then(() => connection.invoke('JoinDashboard').catch(() => { }))
                .catch(() => {
                    const fallback = document.createElement('div');
                    fallback.className = 'alert alert-secondary';
                    fallback.textContent = 'اتصال Real-time برقرار نشد. لطفاً صفحه را تازه‌سازی کنید.';
                    container.appendChild(fallback);
                });
        })();
    </script>
}
